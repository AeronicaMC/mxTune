import java.time.LocalDateTime

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0'
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
plugins {
    // https://imperceptiblethoughts.com/shadow/introduction/
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id "org.sonarqube" version "3.0"
    id 'java'
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
    maven {
        url 'https://www.cursemaven.com'
        // FG4: It's recommended to uncomment the following block
        // content {
        //     includeGroup "curse.maven"
        // }
    }
}

configurations {
    shade
}

def timestamp = "${use_timestamp}".toString() == "true" ? LocalDateTime.now().format("-YYYY-MM-dd.A").toString() : ""
version = "${project.version_mod}${timestamp}"
group = 'aeronicamc'
archivesBaseName = "mxtune-${project.version_mc}"
java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.
project.logger.info('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    // mappings channel: 'official', version: '1.16.5'
    mappings channel: "${mappings_channel}", version: "${mappings_version}-${version_mc}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Need these if building with some other mods that use mixin's
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            ideaModule "${project.name}.main"

            // program arguments
            args '--username', 'Player01'

            mods {
                mxtune {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Need these if building with some other mods that use mixin's
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            ideaModule "${project.name}.main"

            mods {
                mxtune {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Need these if building with some other mods that use mixin's
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            ideaModule "${project.name}.main"

            args '--mod', 'mxtune', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mxtune {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${version_mc}-${version_forge}"

    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // These 3 compileOnly lines are for travis CI and sonarcloud using openjdk11. it provides the missing
    // javax/jakarta/net-beans xml related stuff removed from java 10+
    compileOnly 'com.sun.activation:javax.activation:1.2.0'
    compileOnly 'javax.xml.bind:jaxb-api:2.3.0'
    compileOnly 'com.sun.xml.bind:jaxb-core:2.3.0'

    // compile against the JEI API but do not include it at runtime
    //compileOnly fg.deobf("mezz.jei:jei-${version_mc}:${jei_version}:api")
    // at runtime, use the full JEI jar
    implementation fg.deobf("curse.maven:${project.jei_version}")
    implementation fg.deobf("curse.maven:${project.configured}")
    implementation fg.deobf("curse.maven:${project.better_mods_button}")

    implementation "com.h2database:h2-mvstore:${project.h2_version}"
    shade "com.h2database:h2-mvstore:${project.h2_version}"
//    implementation 'com.h2database:h2-mvstore:1.4.200'
//    shade 'com.h2database:h2-mvstore:1.4.200'
    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'mixins.mxtune.refmap.json'
    config 'mixins.mxtune.json'

    debug.verbose = true
    debug.export = true
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xlint:unchecked', '-Xlint:deprecation'])
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "mxtune",
            "Specification-Vendor": "aeronica",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"aeronica",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})"
        ])
    }
}

processResources {
    // Exclude the GIMP image files
    exclude '**/*.xcf'

    // Exclude the Cubik model files
    exclude '**/*.bdc3D'

    // Exclude the Paint.NET image files
    exclude '**/*.pdn'

    eachFile {
        project.logger.info("Processing: $it.name")
        if (it.relativePath.segments[0] in ['META-INF'])
            expand project.properties
    }
}

sonarqube {
    properties {
        property "sonar.organization", "aeronicamc"
        property "sonar.projectKey", "AeronicaMC_mxTune"
        property "sonar.branch.name", "${project.branch_name}"
        //property "sonar.coverage.exclusions", "**/*"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

reobf {
    shadowJar {}
}


def relocate(origin) {
    shadowJar.relocate(origin, "aeronicamc.libs.mxtune.shadow.$origin")
}

shadowJar {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'org.h2'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/proguard/**'
    exclude 'META-INF/services/**'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/versions/**'
    exclude 'module-info.class'
    exclude 'LICENSE'

    finalizedBy 'reobfShadowJar'
    assemble.dependsOn shadowJar
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}
