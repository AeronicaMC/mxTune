buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
		classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0'
        classpath 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'
    }
}

plugins {
    id "org.sonarqube" version "3.0"
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

//version = "${project.modVersionMajor}.${project.modVersionMinor}.${project.modVersionRev}-${project.versionType}.${project.typeVersion}"
version = "${project.modVersionMajor}.${project.modVersionMinor}.${project.modVersionRev}"
group = "net.aeronica.mods.mxtune"
archivesBaseName = "mxtune-1.12.2"

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: "${project.mappings_channel}", version: "${project.mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            ideaModule "${project.name}.main"

            //args '--username', 'Player01'

            mods {
                mxtune {
                    source sourceSets.main
                }
            }
        }

        client01 {
            parent runs.client
            workingDirectory project.file('run01')

            // program arguments
            args '--username', 'Player325'
        }

        client02 {
            parent runs.client
            workingDirectory project.file('run02')

            // program arguments
            args '--username', 'Player350'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            ideaModule "${project.name}.main"

            mods {
                mxtune {
                    source sourceSets.main
                }
            }
        }

        server03 {
            parent runs.server
            workingDirectory project.file('run03')
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.version_mc}-${project.version_forge}"
    // These 3 compileOnly lines are for travis CI and sonarcloud using openjdk11. it provides the missing
    // javax/jakarta/net-beans xml related stuff removed from java 10+
    compileOnly 'com.sun.activation:javax.activation:1.2.0'
    compileOnly 'javax.xml.bind:jaxb-api:2.3.0'
    compileOnly 'com.sun.xml.bind:jaxb-core:2.3.0'

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei_${project.version_mc}:${project.jei_version}:api")
    // at runtime, use the full JEI jar
//    runtimeOnly fg.deobf("mezz.jei:jei_${project.version_mc}:${project.jei_version}")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xlint:unchecked', '-Xlint:deprecation'])
}

jar {
    manifest {
	    attributes ([
            "Specification-Title": "mxtune",
            "Specification-Vendor": "aeronica",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"aeronica",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            "FMLAT": "accesstransformer.cfg"
       ])
	}
}

processResources {
    // Exclude the GIMP image files
    exclude '**/*.xcf'

    // Exclude the Cubik model files
    exclude '**/*.bdc3D'

    // Exclude the Paint.NET image files
    exclude '**/*.pdn'
    
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.version_mc
    inputs.property "forgeversion", project.version_forge

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':version, 'mcversion':project.version_mc, 'forgeversion':project.version_forge
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    eachFile {
        project.logger.info("Processing: $it.name")
        if (it.relativePath.segments[0] in ['META-INF'])
            expand project.properties
    }
}

sonarqube {
    properties {
        property "sonar.organization", "aeronicamc"
        property "sonar.projectKey", "AeronicaMC_mxTune"
        property "sonar.branch.name", "${project.branch_name}"
        //property "sonar.coverage.exclusions", "**/*"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

//task signJar(type: SignJar, dependsOn: reobfJar) {
//    onlyIf {
//        project.hasProperty("keyStore")
//    }
//
//    keyStore = project.findProperty('keyStore')
//    alias = project.findProperty('keyStoreAlias')
//    storePass = project.findProperty('keyStorePass')
//    keyPass = project.findProperty('keyStoreKeyPass')
//    inputFile = jar.archivePath
//    outputFile = jar.archivePath
//}

sourceSets {
    main { output.resourcesDir = output.classesDir }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}



